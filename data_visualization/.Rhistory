dplyr::summarise(SprintSpeed = mean(SprintSpeed, na.rm = TRUE)) %>%
ggplot(aes(x = Age, y = SprintSpeed)) +
geom_line(size = 1)
#add points to line chart
df %>%
filter(Age < 40) %>%
dplyr::group_by(Age) %>%
dplyr::summarise(SprintSpeed = mean(SprintSpeed, na.rm = TRUE)) %>%
ggplot(aes(x = Age, y = SprintSpeed)) +
geom_point(size = 3) +
geom_line(size = 1)
## first group all FIFA players into age groups and summarize physical characteristics
df_summary <- df %>%
mutate(Group = ifelse(Age < 20, "Youth",
ifelse(Age >= 20 & Age < 25, "Young",
ifelse(Age >= 25 & Age < 30, "Established",
ifelse(Age >= 30 & Age < 35, "Experienced", "Old")))))
View(df_summary)
## first group all FIFA players into age groups and summarize physical characteristics
df_summary <- df %>%
mutate(Group = ifelse(Age < 20, "Youth",
ifelse(Age >= 20 & Age < 25, "Young",
ifelse(Age >= 25 & Age < 30, "Established",
ifelse(Age >= 30 & Age < 35, "Experienced", "Old"))))) %>%
dplyr::group_by(Group) %>%
dplyr::summarise(SprintSpeed = mean(SprintSpeed, na.rm = TRUE),
Strength = mean(Strength, na.rm = TRUE),
Balance = mean(Balance, na.rm = TRUE),
Acceleration = mean(Acceleration, na.rm = TRUE),
Jumping = mean(Jumping, na.rm = TRUE),
Stamina = mean(Stamina, na.rm = TRUE),
Agility = mean(Agility, na.rm = TRUE))
View(df_summary)
View(df_summary)
View(df_summary)
View(df_summary)
# remember ggplot2 likes all dataframes in long format, so let's go from wide to long
df_summary_long <- df_summary %>%
ungroup() %>%
select(-Group) %>%
gather(key = "key",
value = "value")
View(df_summary_long)
# remember ggplot2 likes all dataframes in long format, so let's go from wide to long
df_summary_long <- df_summary %>%
ungroup() %>%
select(-Group) %>%
gather(key = "key",
value = "value") %>%
mutate(Group = rep(df_summary$Group, times = ncol(df_summary) - 1))
View(df_summary_long)
# ensure consistent order across factors
df_summary_long$key <- factor(df_summary_long$key, levels = unique(df_summary_long$key))
#visualize line chart across variables and add coord_polar()
df_summary_long %>%
ggplot(aes(x = key, y = value, group = Group))
#visualize line chart across variables and add coord_polar()
df_summary_long %>%
ggplot(aes(x = key, y = value, group = Group)) +
geom_polygon(fill = NA,
size = 1,
aes(color = Group,
group = Group))
#visualize line chart across variables and add coord_polar()
df_summary_long %>%
ggplot(aes(x = key, y = value, group = Group)) +
geom_polygon(fill = NA,
size = 1,
aes(color = Group,
group = Group)) +
labs(y = "Rating  (0-100)",
x = "")
#visualize line chart across variables and add coord_polar()
df_summary_long %>%
ggplot(aes(x = key, y = value, group = Group)) +
geom_polygon(fill = NA,
size = 1,
aes(color = Group,
group = Group)) +
labs(y = "Rating  (0-100)",
x = "") +
coord_polar()
#visualize line chart across variables and add coord_polar()
df_summary_long %>%
ggplot(aes(x = key, y = value, group = Group)) +
geom_polygon(fill = NA,
size = 1,
aes(color = Group,
group = Group)) +
labs(y = "Rating  (0-100)",
x = "") +
coord_polar() +
scale_y_continuous(limits = c(40,70)) +
theme_minimal()
#visualize line chart across variables and add coord_polar()
df_summary_long %>%
ggplot(aes(x = key, y = value, group = Group)) +
geom_polygon(alpha = 0.2, #change alpha to vary transparency if aiming to maintain filled area
size = 0.5,
aes(color = Group,
fill = Group,
group = Group)) +
labs(y = "Rating  (0-100)",
x = "") +
coord_polar() +
scale_y_continuous(limits = c(40,70)) +
theme_minimal()
#line chart
df %>%
filter(Age > 25 & Age < 40) %>%
dplyr::group_by(Age) %>%
dplyr::summarise(SprintSpeed = mean(SprintSpeed, na.rm = TRUE)) %>%
ggplot(aes(x = Age, y = SprintSpeed)) +
geom_point() +
geom_smooth(method = "lm") #lm = linear model, can be glm or loess
#add points to line chart
df %>%
filter(Age < 40) %>%
dplyr::group_by(Age) %>%
dplyr::summarise(SprintSpeed = mean(SprintSpeed, na.rm = TRUE)) %>%
ggplot(aes(x = Age, y = SprintSpeed)) +
geom_point() +
stat_smooth(method = "lm", #lm = linear model
formula = y~poly(x,2)) #but now with polynomial regression to account for non-linearity
View(top_ten_nations_long)
top_ten_nations_long %>%
ungroup() %>%
select(Overall, Potential) %>%
gather(key = "key", value = "value") %>%
mutate(Nationality = rep(top_ten_nations_long$Nationality, times = 2))
top_ten_nations_long %>%
ungroup() %>%
select(Overall, Potential) %>%
gather(key = "key", value = "value") %>%
mutate(Nationality = rep(top_ten_nations_long$Nationality, times = 2)) %>%
dplyr::group_by(Nationality, key) %>%
dplyr::summarise(value = mean(value))
top_ten_nations_long %>%
ungroup() %>%
select(Overall, Potential) %>%
gather(key = "key", value = "value") %>%
mutate(Nationality = rep(top_ten_nations_long$Nationality, times = 2)) %>%
dplyr::group_by(Nationality, key) %>%
dplyr::summarise(value = mean(value)) %>%
ggplot(aes(x = value, y = Nationality)) +
geom_line(aes(group = Nationality),
color = "grey81",
size = 1)
top_ten_nations_long %>%
ungroup() %>%
select(Overall, Potential) %>%
gather(key = "key", value = "value") %>%
mutate(Nationality = rep(top_ten_nations_long$Nationality, times = 2)) %>%
dplyr::group_by(Nationality, key) %>%
dplyr::summarise(value = mean(value)) %>%
ggplot(aes(x = value, y = Nationality)) +
geom_line(aes(group = Nationality),
color = "grey81",
size = 1) +
geom_point(aes(color = key),
size = 2)
top_ten_nations_long %>%
ungroup() %>%
select(Overall, Potential) %>%
gather(key = "key", value = "value") %>%
mutate(Nationality = rep(top_ten_nations_long$Nationality, times = 2)) %>%
dplyr::group_by(Nationality, key) %>%
dplyr::summarise(value = mean(value)) %>%
ggplot(aes(x = value, y = Nationality)) +
geom_line(aes(group = Nationality),
color = "grey81",
size = 1) +
geom_point(aes(color = key),
size = 2) +
labs(x = "") +
theme_minimal()
# create data for heatmap example
df_heatmap <- data.frame(Minute = seq(from = 15, to = 90, by = 15),
Player1 = seq(from = 90, to = 157, length.out = 6),
Player2 = seq(from = 83, to = 130, length.out = 6),
Player3 = seq(from = 96, to = 122, length.out = 6),
Player4 = seq(from = 98, to = 132, length.out = 6),
Player5 = seq(from = 85, to = 136, length.out = 6),
Player6 = seq(from = 88, to = 110, length.out = 6),
Player7 = seq(from = 91, to = 144, length.out = 6),
Player8 = seq(from = 82, to = 142, length.out = 6),
Player9 = seq(from = 92, to = 123, length.out = 6),
Player10 = seq(from = 95, to = 104, length.out = 6))
View(df_heatmap)
View(df_heatmap)
#go from wide to long
df_heatmap_long <- df_heatmap %>%
select(-Minute) %>%
gather(key = "key",
value = "value")
View(df_heatmap_long)
View(df_heatmap_long)
#go from wide to long
df_heatmap_long <- df_heatmap %>%
select(-Minute) %>%
gather(key = "key",
value = "value") %>%
mutate(Minute = rep(df_heatmap$Minute, times = ncol(df_heatmap) - 1))
View(df_heatmap_long)
df_heatmap_long$key <- factor(df_heatmap_long$key, levels = c("Player1", "Player2", "Player3", "Player4", "Player5",
"Player6", "Player7", "Player8", "Player9", "Player10"))
#heatmap
df_heatmap_long %>%
ggplot(aes(x = as.numeric(Minute),
y = key,
fill = value))
View(df_heatmap_long)
#heatmap
df_heatmap_long %>%
ggplot(aes(x = as.numeric(Minute),
y = key,
fill = value)) +
geom_raster(interpolate = FALSE) +
labs(y = "Athlete",
x = "Minute Mark") +
scale_fill_viridis_c(option = "magma")
#heatmap interpolated
df_heatmap_long %>%
ggplot(aes(x = as.numeric(Minute),
y = key,
fill = value)) +
geom_raster(interpolate = TRUE) +
labs(y = "Athlete",
x = "Minute Mark") +
scale_fill_viridis_c(option = "magma")
library(plyr)
library(scales)
library(zoo)
df_data <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/yahoo.csv")
df_data$date <- as.Date(df_data$date)  # format date
df_data <- df_data[df_data$year >= 2012, ]  # filter reqd years
df_data$yearmonth <- as.yearmon(df_data$date)
df_data$yearmonthf <- factor(df_data$yearmonth)
df_data <- ddply(df_data,.(yearmonthf), transform, monthweek=1+week-min(week))  # compute week number of month
df_data <- ddply(df_data,.(yearmonthf), transform, monthweek=1+week-min(week))  # compute week number of month
df_data <- df_data[, c("year", "yearmonthf", "monthf", "week", "monthweek", "weekdayf", "VIX.Close")]
head(df_data)
df_data %>%
ggplot(aes(monthweek, weekdayf, fill = VIX.Close)) +
geom_tile(colour = "white") +
facet_grid(year~monthf) +
scale_fill_gradient(low="red", high="green") +
labs(x="Week of Month",
y="",
title = "Time-Series Calendar Heatmap",
subtitle="Yahoo Closing Price",
fill="Close")
#summary bar chart
top_ten_nations %>%
ggplot(aes(x = fct_reorder(Nationality, -Value_mean), y = Value_mean)) +
geom_bar(stat = 'identity',
color = "black",
size = 0.5,
aes(fill = ifelse(Value_mean < 20, "High", "Low"))) +
#add errorbars
geom_errorbar(aes(ymin = Value_mean, #minimum matches the mean so that errorbar lines with bar
ymax = Value_mean + Value_sd), #maximum = mean + SD
width = 0.1, size = 0.5) + #match the size to that of geom_bar so that things are even
labs(y = "Market Value (€)",
x = "Nationality",
fill = "Value") +
scale_fill_manual(values = c("red", "grey31")) +
theme_minimal() +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.line = element_line(color = "black"),
legend.position = "top")
#summary bar chart
top_ten_nations %>%
ggplot(aes(x = fct_reorder(Nationality, -Value_mean), y = Value_mean)) +
geom_bar(stat = 'identity',
color = "black",
size = 0.5,
aes(fill = ifelse(Nationality == "Germany", "GER", "NO"))) +
#add errorbars
geom_errorbar(aes(ymin = Value_mean, #minimum matches the mean so that errorbar lines with bar
ymax = Value_mean + Value_sd), #maximum = mean + SD
width = 0.1, size = 0.5) + #match the size to that of geom_bar so that things are even
labs(y = "Market Value (€)",
x = "Nationality",
fill = "Value") +
scale_fill_manual(values = c("red", "grey31")) +
theme_minimal() +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.line = element_line(color = "black"),
legend.position = "top")
library(ggrepel)
#summary bar chart
top_ten_nations %>%
ggplot(aes(x = fct_reorder(Nationality, -Value_mean), y = Value_mean)) +
geom_bar(stat = 'identity',
color = "black",
size = 0.5,
aes(fill = ifelse(Nationality == "Germany", "GER", "NO"))) +
#add errorbars
geom_errorbar(aes(ymin = Value_mean, #minimum matches the mean so that errorbar lines with bar
ymax = Value_mean + Value_sd), #maximum = mean + SD
width = 0.1, size = 0.5) + #match the size to that of geom_bar so that things are even
labs(y = "Market Value (€)",
x = "Nationality",
fill = "Value") +
scale_fill_manual(values = c("red", "grey31")) +
theme_minimal() +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.line = element_line(color = "black"),
legend.position = "top")
df %>%
ggplot(aes(x = SprintSpeed, y = Acceleration)) +
geom_point(aes(alpha = ifelse(grepl("Neymar", Name), "Neymar", "No"), #change transparency based on a condition
color = ifelse(grepl("Neymar", Name), "Neymar", "No"), #change color based on a condition
size = ifelse(grepl("Neymar", Name), "Neymar", "No"))) + #change size based on a condition
geom_text_repel(aes(label = ifelse(grepl("Neymar", Name), "Neymar", NA),
color = ifelse(grepl("Neymar", Name), "Neymar", NA))) + #label specific individuals using geom_text or geom_text_repel
scale_alpha_manual(values = c(1, 0.05)) +
scale_color_manual(values = c("red", "grey31")) +
scale_size_manual(values = c(3, 1)) +
theme(legend.position = "none")
df %>%
ggplot(aes(x = SprintSpeed, y = Acceleration)) +
geom_point(aes(alpha = ifelse(grepl("Pulisic", Name), "Pulisic", "No"), #change transparency based on a condition
color = ifelse(grepl("Pulisic", Name), "Pulisic", "No"), #change color based on a condition
size = ifelse(grepl("Pulisic", Name), "Pulisic", "No"))) + #change size based on a condition
geom_text_repel(aes(label = ifelse(grepl("Pulisic", Name), "Pulisic", NA),
color = ifelse(grepl("Pulisic", Name), "Pulisic", NA))) + #label specific individuals using geom_text or geom_text_repel
scale_alpha_manual(values = c(1, 0.05)) +
scale_color_manual(values = c("red", "grey31")) +
scale_size_manual(values = c(3, 1)) +
theme(legend.position = "none")
df %>%
ggplot(aes(x = SprintSpeed, y = Acceleration)) +
geom_point(aes(alpha = ifelse(grepl("Pulisic", Name), "Pulisic", "Yes"), #change transparency based on a condition
color = ifelse(grepl("Pulisic", Name), "Pulisic", "Yes"), #change color based on a condition
size = ifelse(grepl("Pulisic", Name), "Pulisic", "Yes"))) + #change size based on a condition
geom_text_repel(aes(label = ifelse(grepl("Pulisic", Name), "Pulisic", NA),
color = ifelse(grepl("Pulisic", Name), "Pulisic", NA))) + #label specific individuals using geom_text or geom_text_repel
scale_alpha_manual(values = c(1, 0.05)) +
scale_color_manual(values = c("red", "grey31")) +
scale_size_manual(values = c(3, 1)) +
theme(legend.position = "none")
df %>%
ggplot(aes(x = SprintSpeed, y = Acceleration)) +
geom_point(aes(alpha = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change transparency based on a condition
color = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change color based on a condition
size = ifelse(grepl("Hummels", Name), "Hummels", "Yes"))) + #change size based on a condition
geom_text_repel(aes(label = ifelse(grepl("Hummels", Name), "Hummels", NA),
color = ifelse(grepl("Hummels", Name), "Hummels", NA))) + #label specific individuals using geom_text or geom_text_repel
scale_alpha_manual(values = c(1, 0.05)) +
scale_color_manual(values = c("red", "grey31")) +
scale_size_manual(values = c(3, 1)) +
theme(legend.position = "none")
colnames(df)
str(df$Position)
df %>% filter(grepl("Hummels", Name))
hummals <- df %>% filter(grepl("Hummels", Name))
View(hummals)
df %>%
filter(Position == "LCB") %>%
ggplot(aes(x = SprintSpeed, y = Acceleration)) +
geom_point(aes(alpha = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change transparency based on a condition
color = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change color based on a condition
size = ifelse(grepl("Hummels", Name), "Hummels", "Yes"))) + #change size based on a condition
geom_text_repel(aes(label = ifelse(grepl("Hummels", Name), "Hummels", NA),
color = ifelse(grepl("Hummels", Name), "Hummels", NA))) + #label specific individuals using geom_text or geom_text_repel
scale_alpha_manual(values = c(1, 0.05)) +
scale_color_manual(values = c("red", "grey31")) +
scale_size_manual(values = c(3, 1)) +
theme(legend.position = "none")
df %>%
filter(Position == "LCB") %>%
ggplot(aes(x = SprintSpeed, y = Acceleration)) +
geom_point(aes(alpha = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change transparency based on a condition
color = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change color based on a condition
size = ifelse(grepl("Hummels", Name), "Hummels", "Yes"))) + #change size based on a condition
geom_text_repel(aes(label = ifelse(grepl("Hummels", Name), "Hummels", NA),
color = ifelse(grepl("Hummels", Name), "Hummels", NA))) + #label specific individuals using geom_text or geom_text_repel
scale_alpha_manual(values = c(1, 0.20)) +
scale_color_manual(values = c("red", "grey31")) +
scale_size_manual(values = c(3, 1)) +
theme(legend.position = "none")
df %>%
filter(Position == "LCB") %>%
ggplot(aes(x = SprintSpeed, y = Acceleration)) +
geom_point(aes(alpha = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change transparency based on a condition
color = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change color based on a condition
size = ifelse(grepl("Hummels", Name), "Hummels", "Yes"))) + #change size based on a condition
geom_text_repel(aes(label = ifelse(grepl("Hummels", Name), "Hummels", NA),
color = ifelse(grepl("Hummels", Name), "Hummels", NA))) + #label specific individuals using geom_text or geom_text_repel
scale_alpha_manual(values = c(1, 0.20)) +
scale_color_manual(values = c("red", "grey31")) +
scale_size_manual(values = c(3, 1)) +
theme(legend.position = "none") +
theme_minimal()
df %>%
filter(Position == "LCB") %>%
ggplot(aes(x = SprintSpeed, y = Acceleration)) +
geom_point(aes(alpha = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change transparency based on a condition
color = ifelse(grepl("Hummels", Name), "Hummels", "Yes"), #change color based on a condition
size = ifelse(grepl("Hummels", Name), "Hummels", "Yes"))) + #change size based on a condition
geom_text_repel(aes(label = ifelse(grepl("Hummels", Name), "Hummels", NA),
color = ifelse(grepl("Hummels", Name), "Hummels", NA))) + #label specific individuals using geom_text or geom_text_repel
scale_alpha_manual(values = c(1, 0.20)) +
scale_color_manual(values = c("red", "grey31")) +
scale_size_manual(values = c(3, 1)) +
theme_minimal() +
theme(legend.position = "none")
library(patchwork)
top_ten_nations_long %>%
ungroup() %>%
select(Overall, Potential) %>%
gather(key = "key", value = "value") %>%
mutate(Nationality = rep(top_ten_nations_long$Nationality, times = 2)) %>%
dplyr::group_by(Nationality, key) %>%
dplyr::summarise(value = mean(value)) %>%
ggplot(aes(x = value, y = Nationality)) +
geom_line(aes(group = Nationality),
color = "grey81",
size = 1) +
geom_point(aes(color = key),
size = 2) +
labs(x = "") +
theme_minimal()
lollipop <- top_ten_nations_long %>%
ungroup() %>%
select(Overall, Potential) %>%
gather(key = "key", value = "value") %>%
mutate(Nationality = rep(top_ten_nations_long$Nationality, times = 2)) %>%
dplyr::group_by(Nationality, key) %>%
dplyr::summarise(value = mean(value)) %>%
ggplot(aes(x = value, y = Nationality)) +
geom_line(aes(group = Nationality),
color = "grey81",
size = 1) +
geom_point(aes(color = key),
size = 2) +
labs(x = "") +
theme_minimal()
lollipop
#heatmap interpolated
df_heatmap_long %>%
ggplot(aes(x = as.numeric(Minute),
y = key,
fill = value)) +
geom_raster(interpolate = TRUE) +
labs(y = "Athlete",
x = "Minute Mark") +
scale_fill_viridis_c(option = "magma")
#heatmap interpolated
df_heatmap_long %>%
ggplot(aes(x = as.numeric(Minute),
y = key,
fill = value)) +
geom_raster(interpolate = TRUE) +
labs(y = "Athlete",
x = "Minute Mark") +
scale_fill_viridis_c(option = "magma")
#heatmap interpolated
heatmap <- df_heatmap_long %>%
ggplot(aes(x = as.numeric(Minute),
y = key,
fill = value)) +
geom_raster(interpolate = TRUE) +
labs(y = "Athlete",
x = "Minute Mark") +
scale_fill_viridis_c(option = "magma")
#visualize line chart across variables and add coord_polar()
df_summary_long %>%
ggplot(aes(x = key, y = value, group = Group)) +
geom_polygon(alpha = 0.2, #change alpha to vary transparency if aiming to maintain filled area
size = 0.5,
aes(color = Group,
fill = Group,
group = Group)) +
labs(y = "Rating  (0-100)",
x = "") +
coord_polar() +
scale_y_continuous(limits = c(40,70)) +
theme_minimal()
#visualize line chart across variables and add coord_polar()
polar_plot <- df_summary_long %>%
ggplot(aes(x = key, y = value, group = Group)) +
geom_polygon(alpha = 0.2, #change alpha to vary transparency if aiming to maintain filled area
size = 0.5,
aes(color = Group,
fill = Group,
group = Group)) +
labs(y = "Rating  (0-100)",
x = "") +
coord_polar() +
scale_y_continuous(limits = c(40,70)) +
theme_minimal()
#summary bar chart
boxplot <- top_ten_nations_long %>%
ggplot(aes(x = Nationality, y = Value)) +
geom_boxplot() +
labs(y = "Market Value (€)")
lollipop
heatmap
polar_plot
boxplot
boxplot + heatmap
boxplot + heatmap
boxplot + heatmap + lollipop
boxplot + heatmap + lollipop + polar_plot
boxplot / heatmap
(lollipop + heatmap) / (polar_plot + boxplot)

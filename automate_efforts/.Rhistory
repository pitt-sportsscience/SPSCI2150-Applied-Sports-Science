#install.packages("shiny")
library(shiny)
#example
runExample("01_hello")
#demo
ui <- fluidPage(
titlePanel("Hello world!")
)
server = function(input, output) { }
shinyApp(ui, server)
#demo
ui <- fluidPage(
titlePanel("Hello world!"),
titlePanel("Hello world!")
)
server= function(input, output) { }
shinyApp(ui, server)
#demo
ui <- fluidPage(
titlePanel("Hello world!"),
sidebarLayout(
sidebarPanel(
radioButtons("radio", label = "Choices", choices = list("Choice 1" = 1, "Choice 2" = 2)),
sliderInput("slider1", label = "Slider", min = 0, max = 100, value = 50)
),
mainPanel("Testing")
)
)
server= function(input, output) { }
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
server= function(input, output) { }
#Example 1
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
server= function(input, output) { }
#Example 3
ui <- fluidPage(
titlePanel("Basic widgets"),
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", label = "Action"),
br(),
br(),
submitButton("Submit")),
column(3,
h3("Single checkbox"),
checkboxInput("checkbox", label = "Choice A", value = TRUE)),
column(3,
checkboxGroupInput("checkGroup",
label = h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2, "Choice 3" = 3),
selected = 1)),
column(3,
dateInput("date",
label = h3("Date input"),
value = "2014-01-01"))
),
fluidRow(
column(3,
dateRangeInput("dates", label = h3("Date range"))),
column(3,
fileInput("file", label = h3("File input"))),
column(3,
h3("Help text"),
helpText("Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets.")),
column(3,
numericInput("num",
label = h3("Numeric input"),
value = 1))
),
fluidRow(
column(3,
radioButtons("radio", label = h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3),selected = 1)),
column(3,
selectInput("select", label = h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
sliderInput("slider1", label = h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75))
),
column(3,
textInput("text", label = h3("Text input"),
value = "Enter text..."))
)
)
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
server= function(input, output) { }
#Example 1
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
server= function(input, output) { }
#Example 4
# add server function, create a shiny app that output histogram
ui <- fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
#
server <- function(input, output){
output$distPlot <- renderPlot({
hist(runif(1000),breaks=input$bins)
})
}
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
server= function(input, output) { }
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
p("p creates a paragraph of text."),
p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized (i.e, emphasized) text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument ", style = "color:blue"),
br(),
p("span does the same thing as div, but it works with",
span("groups of words", style = "color:blue"),
"that appear inside a paragraph.")
)
)
)
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
server= function(input, output) { }
#Example 3
ui <- fluidPage(
titlePanel("Basic widgets"),
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", label = "Action"),
br(),
br(),
submitButton("Submit")),
column(3,
h3("Single checkbox"),
checkboxInput("checkbox", label = "Choice A", value = TRUE)),
column(3,
checkboxGroupInput("checkGroup",
label = h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2, "Choice 3" = 3),
selected = 1)),
column(3,
dateInput("date",
label = h3("Date input"),
value = "2014-01-01"))
),
fluidRow(
column(3,
dateRangeInput("dates", label = h3("Date range"))),
column(3,
fileInput("file", label = h3("File input"))),
column(3,
h3("Help text"),
helpText("Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets.")),
column(3,
numericInput("num",
label = h3("Numeric input"),
value = 1))
),
fluidRow(
column(3,
radioButtons("radio", label = h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3),selected = 1)),
column(3,
selectInput("select", label = h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
sliderInput("slider1", label = h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75))
),
column(3,
textInput("text", label = h3("Text input"),
value = "Enter text..."))
)
)
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
server= function(input, output) { }
#Example 4
# add server function, create a shiny app that output histogram
ui <- fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
#
server <- function(input, output){
output$distPlot <- renderPlot({
hist(runif(1000),breaks=input$bins)
})
}
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
server= function(input, output) { }
#Example 5
# Add numeric input box and slider bar
ui <- fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
numericInput("count","Number of values",1000),
sliderInput("range",
"Range of values:",
min = -100,
max = 100,
value = c(-10,10))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
#
server <- function(input, output){
output$distPlot <- renderPlot({
hist(runif(input$count,input$range[1],input$range[2]),breaks=input$bins)
})
}
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
server= function(input, output) { }
#Example 6
# create uniform and normal panels
ui <- fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
tabsetPanel(id="tabset",
tabPanel("uniform",
sliderInput("unif_bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
numericInput("unif_count","Number of values",1000),
sliderInput("range",
"Range of values:",
min = -100,
max = 100,
value = c(-10,10))
),
tabPanel("normal",
sliderInput("normal_bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
numericInput("normal_count","Number of values",1000),
numericInput("mean","Mean",0),
numericInput("sd","Standard deviation",1)
)
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
#
server <- function(input, output){
output$distPlot <- renderPlot({
if(input$tabset=="uniform"){
hist(runif(input$unif_count,input$range[1],input$range[2]),
breaks=input$unif_bins,
main="Histogram of uniform distribution",
xlab="x")
}
if(input$tabset=="normal"){
hist(rnorm(input$normal_count,input$mean,input$sd),
breaks=input$normal_bins,
main="Histogram of normal distribution",
xlab="x")
}
})
}
shinyApp(ui, server)

df_clean %>%
ggplot(aes(x = HSD)) +
geom_histogram(color = "black",
fill = "grey31")
df_clean %>%
ggplot(aes(x = HSD)) +
geom_histogram(color = "black",
fill = "grey31")
shapiro.test(df_clean$HSD)
df_clean <- df_clean %>%
mutate(HSD_log = log10(HSD),
HSD_rec = 1/HSD,
HSD_sqrt = sqrt(HSD))
df_clean <- df_clean %>%
mutate(HSD_log = log10(HSD),
HSD_rec = 1/HSD,
HSD_sqrt = sqrt(HSD))
df_clean %>%
ggplot(aes(x = HSD_log)) +
geom_histogram(color = "black",
fill = "grey91")
df_clean %>%
ggplot(aes(x = HSD_rec)) +
geom_histogram(color = "black",
fill = "grey61")
df_clean %>%
ggplot(aes(x = HSD_sqrt)) +
geom_histogram(color = "black",
fill = "grey41")
# transform variables
f_clean <- df_clean %>%
mutate(HSD_log = log10(HSD),
HSD_rec = 1/HSD,
HSD_sqrt = sqrt(HSD))
# visualize histograms - logarithic transformation
df_clean %>%
ggplot(aes(x = HSD_log)) +
geom_histogram(color = "black",
fill = "grey91")
shapiro.test(df_clean$HSD_log)
# visualize histograms - square root transformation
df_clean %>%
ggplot(aes(x = HSD_sqrt)) +
geom_histogram(color = "black",
fill = "grey41")
shapiro.test(df_clean$HSD_sqrt)
shapiro.test(df_clean$HSD_log)
# transform variables
f_clean <- df_clean %>%
mutate(HSD_log = log(HSD),
HSD_rec = 1/HSD,
HSD_sqrt = sqrt(HSD))
# visualize histograms - logarithic transformation
df_clean %>%
ggplot(aes(x = HSD_log)) +
geom_histogram(color = "black",
fill = "grey91")
shapiro.test(df_clean$HSD_log)
min(HSD)
min(df_clean$HSD)
log(0)
# visualize histograms - square root transformation
df_clean %>%
ggplot(aes(x = HSD_sqrt)) +
geom_histogram(color = "black",
fill = "grey41")
shapiro.test(df_clean$HSD_sqrt)
#statistical correltion analysis
cor.test(df_clean$HSD, df_clean$VHSD)
df_clean %>%
ggplot(aes(x = HSD, y = VHSD)) +
geom_point(aes(alpha = HSD)) +
labs(x = "High-Speed Distance (m)",
y = "Very High-Speed Distance (m)",
alpha = "Magnitude")
#statistical correltion analysis
cor.test(df_clean$HSD, df_clean$VHSD, method = "spearman")
cor.test(df_clean$HSD, df_clean$VHSD, method = "pearson")
#statistical correltion analysis
cor.test(df_clean$HSD, df_clean$VHSD, method = "spearman")
cor.test(df_clean$HSD, df_clean$VHSD, method = "pearson")
df_clean %>%
ggplot(aes(x = `Total Duration`, y = `Total Distance`)) +
geom_point(aes(alpha = `Total Distance`)) +
labs(x = "Total Duration (h)",
y = "Total Distance (m)",
alpha = "Magnitude")
df_clean <- df_clean %>%
filter(`Total Duration` < 3 & `Total Duration` > 0.33)
# look at total duration again
df_clean %>%
ggplot(aes(x = `Total Duration`)) +
geom_histogram(fill = "grey31",
color = "black",
bins = 50)
df_clean %>%
ggplot(aes(x = Starter,
y = `Total Player Load`)) +
geom_boxplot(aes(fill = Game))
df_clean <- df_clean %>%
mutate(`Total Player Load` = ifelse(Game == "Training" & `Total Player Load` > 800, NA, `Total Player Load`))
df_clean %>%
select(`Max Vel`, HSD, VHSD) %>%
gather(key = "key",
value = "value") %>%
mutate(Starter = rep(df_clean$Starter, times = 3),
date = rep(df_clean$date, times = 3),
Game = rep(df_clean$Game, times = 3)) %>%
ggplot(aes(x = Starter,
y = value)) +
geom_boxplot(aes(fill = Game)) +
facet_wrap(~key,
scales = "free_y")
df_clean <- df_clean %>%
mutate(`Total Player Load` = ifelse(Game == "Training" & `Total Player Load` > 800, NA, `Total Player Load`),
`Max Vel` = ifelse(`Max Vel` < 12, NA, `Max Vel`))
df_clean %>%
ggplot(aes(x = HSD)) +
geom_histogram(color = "black",
fill = "grey31")
shapiro.test(df_clean$HSD)
# transform variables
f_clean <- df_clean %>%
mutate(HSD_log = log(HSD),
HSD_rec = 1/HSD,
HSD_sqrt = sqrt(HSD))
# visualize histograms - logarithmic transformation
df_clean %>%
ggplot(aes(x = HSD_log)) +
geom_histogram(color = "black",
fill = "grey91")
shapiro.test(df_clean$HSD_log)
# visualize histograms - square root transformation
df_clean %>%
ggplot(aes(x = HSD_sqrt)) +
geom_histogram(color = "black",
fill = "grey41")
shapiro.test(df_clean$HSD_sqrt)
df_clean %>%
ggplot(aes(x = `Total Duration`, y = `Total Distance`)) +
geom_point(aes(alpha = `Total Distance`)) +
labs(x = "Total Duration (h)",
y = "Total Distance (m)",
alpha = "Magnitude")
shapiro.test(df_clean$`Total Distance`)
df_games <- df_clean %>%
filter(Game == "Game")
View(df_games)
min(df_games$`Total Duration`)
df_games <- df_clean %>%
filter(Game == "Game" & `Total Duration` > 1.1)
df_games <- df_clean %>%
min(df_games$`Total Duration`)
min(df_games$`Total Duration`)
df_games %>%
ggplot(aes(x = HSD)) +
geom_histogram(color = "black",
fill = "grey31")
shapiro.test(df_clean$HSD)
shapiro.test(df_games$HSD)
# transform variables
df_games <- df_games %>%
mutate(HSD_log = log(HSD),
HSD_rec = 1/HSD,
HSD_sqrt = sqrt(HSD))
# visualize histograms - logarithmic transformation
df_games %>%
ggplot(aes(x = HSD_log)) +
geom_histogram(color = "black",
fill = "grey91")
shapiro.test(df_clean$HSD_log)
# visualize histograms - logarithmic transformation
df_games %>%
ggplot(aes(x = HSD_log)) +
geom_histogram(color = "black",
fill = "grey91")
shapiro.test(df_games$HSD_log)
# visualize histograms - square root transformation
df_games %>%
ggplot(aes(x = HSD_sqrt)) +
geom_histogram(color = "black",
fill = "grey41")
shapiro.test(df_games$HSD_sqrt)
df_games %>%
ggplot(aes(x = `Total Duration`, y = `Total Distance`)) +
geom_point(aes(alpha = `Total Distance`)) +
labs(x = "Total Duration (h)",
y = "Total Distance (m)",
alpha = "Magnitude")
shapiro.test(df_games$`Total Player Load`)
cor.test(df_clean$HSD, df_clean$VHSD, method = "spearman")
#statistical correltion analysis
cor.test(df_clean$HSD, df_clean$VHSD, method = "pearson")
df_games_num <- df_games %>%
select_if(is.numeric)
corrplot(df_games_num,
method = "color",
tl.cex = 1,
tl.col = "black")
df_games_num <- df_games %>%
select_if(is.numeric)
corrplot(df_games_num,
method = "color",
tl.cex = 1,
tl.col = "black")
### use the corr() function to correlate all values with one another
df_games_cor <- corr(df_games_num)
### use the corr() function to correlate all values with one another
df_games_cor <- cor(df_games_num)
corrplot(df_games_cor,
method = "color",
tl.cex = 1,
tl.col = "black")
corrplot(df_games_cor,
method = "color",
tl.cex = 0.2,
tl.col = "black")
View(df_games_num)
View(df_games_num)
df_games_num <- df_games %>%
select_if(is.numeric) %>%
select(-`IMA Dive Intensity Left Low Count`, -`IMA Dive Intensity Right Low Count`,
-`IMA Dive Intensity Left Med Count`, -`IMA Dive Intensity Right Med Count`,
-`IMA Dive Intensity Left High Count`, -`IMA Dive Intensity Right High Count`,
-`Velocity Band 8 Total Distance`)
### use the corr() function to correlate all values with one another
df_games_cor <- cor(df_games_num)
View(df_games_cor)
df_games_num <- df_games %>%
select_if(is.numeric) %>%
select(-`IMA Dive Intensity Left Low Count`, -`IMA Dive Intensity Right Low Count`,
-`IMA Dive Intensity Left Med Count`, -`IMA Dive Intensity Right Med Count`,
-`IMA Dive Intensity Left High Count`, -`IMA Dive Intensity Right High Count`,
-`Velocity Band 8 Total Distance`, -`Total Live Play`)
### use the corr() function to correlate all values with one another
df_games_cor <- cor(df_games_num)
View(df_games_cor)
df_games_num <- df_games %>%
select_if(is.numeric) %>%
select(-`IMA Dive Intensity Left Low Count`, -`IMA Dive Intensity Right Low Count`,
-`IMA Dive Intensity Left Med Count`, -`IMA Dive Intensity Right Med Count`,
-`IMA Dive Intensity Left High Count`, -`IMA Dive Intensity Right High Count`,
-`Velocity Band 8 Total Distance`, -`Total Live Play`) %>%
na.omit()
### use the corr() function to correlate all values with one another
df_games_cor <- cor(df_games_num)
View(df_games_cor)
df_games_num <- df_games %>%
select_if(is.numeric) %>%
select(-`IMA Dive Intensity Left Low Count`, -`IMA Dive Intensity Right Low Count`,
-`IMA Dive Intensity Left Med Count`, -`IMA Dive Intensity Right Med Count`,
-`IMA Dive Intensity Left High Count`, -`IMA Dive Intensity Right High Count`,
-`Velocity Band 8 Total Distance`, -`Total Live Play`,
-HSD_log, -HSD_rec, -HSD_sqrt) %>%
na.omit()
### use the corr() function to correlate all values with one another
df_games_cor <- cor(df_games_num)
corrplot(df_games_cor,
method = "color",
tl.cex = 0.2,
tl.col = "black")
corrplot(df_games_cor,
method = "color",
tl.cex = 0.5,
tl.col = "black")
corrplot(df_games_cor,
method = "color",
tl.cex = 0.5,
tl.col = "black",
order = "hclust")
corrplot(df_games_cor,
method = "color",
tl.cex = 0.5,
tl.col = "black",
order = "hclust")
corrplot(df_games_cor,
method = "color",
tl.cex = 0.75,
tl.col = "black",
order = "hclust")
corrplot(df_games_cor,
method = "color",
tl.cex = 0.6,
tl.col = "black",
order = "hclust")
df_test <- df_games %>%
dplyr::group_by(user_uid, Starter) %>%
dplyr::summarise(MaxVel = max(`Max Vel`, na.rm = TRUE))
View(df_test)
df_test %>%
ggplot(aes(x = Starter,
y = MaxVel)) +
geom_boxplot(aes(fill = Starter))
t.test(MaxVel ~ Starter, data = df_test)
df_test <- df_games %>%
dplyr::group_by(user_uid, Starter) %>%
dplyr::summarise(MaxVel = max(`Max Vel`, na.rm = TRUE) * 0.44704) #mph to m/s
df_test %>%
ggplot(aes(x = Starter,
y = MaxVel)) +
geom_boxplot(aes(fill = Starter))
df_test %>%
ggplot(aes(x = Starter,
y = MaxVel)) +
labs(y = "Maximum Velocity (m/s)") +
geom_boxplot(aes(fill = Starter))
t.test(MaxVel ~ Starter, data = df_test)
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Starter, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`))
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`))
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid)) +
geom_line(aes(group = user_uid))
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid)) +
geom_line(aes(group = user_uid,
color = user_uid))
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid)) +
geom_line(aes(group = user_uid,
color = user_uid)) +
theme(legend.position = "none")
df_starter_game_training <- df_clean %>%
filter(Starter == "Starter") %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`))
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid)) +
geom_line(aes(group = user_uid,
color = user_uid)) +
theme(legend.position = "none")
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`))
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid)) +
geom_line(aes(group = user_uid,
color = user_uid)) +
theme(legend.position = "none")
t.test(MaxVel ~ user_uid, paired = TRUE, data = df_starter_game_training)
t.test(MaxVel ~ Game, paired = TRUE, data = df_starter_game_training)
t.test(MaxVel ~ Game, paired = TRUE, data = df_starter_game_training,
complete.cases(MaxVel))
View(df_starter_game_training)
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`) * 0.44704) %>% #convert to m/s
drop.na()
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`) * 0.44704) %>% #convert to m/s
na.omit()
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid)) +
geom_line(aes(group = user_uid,
color = user_uid)) +
labs(y = "Maximum Velocity (m/s)") +
theme(legend.position = "none")
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`) * 0.44704) %>% #convert to m/s
ungroup() %>%
na.omit()
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`) * 0.44704) %>% #convert to m/s
na.omit()
View(df_starter_game_training)
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`) * 0.44704) %>% #convert to m/s
na.omit()
View(df_starter_game_training)
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid)) +
geom_line(aes(group = user_uid,
color = user_uid)) +
labs(y = "Maximum Velocity (m/s)") +
theme(legend.position = "none")
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`) * 0.44704) #convert to m/s
View(df_starter_game_training)
df_starter_game_training <- df_clean %>%
dplyr::group_by(user_uid, Game) %>%
dplyr::summarise(MaxVel = mean(`Max Vel`, na.rm = TRUE) * 0.44704) #convert to m/s
View(df_starter_game_training)
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid)) +
geom_line(aes(group = user_uid,
color = user_uid)) +
labs(y = "Maximum Velocity (m/s)") +
theme(legend.position = "none")
t.test(MaxVel ~ Game, paired = TRUE, data = df_starter_game_training,
complete.cases(MaxVel))
t.test(MaxVel ~ Game, paired = TRUE, data = df_starter_game_training)
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid)) +
geom_line(aes(group = user_uid,
color = user_uid)) +
labs(y = "Maximum Velocity (m/s)") +
theme(legend.position = "none")
df_starter_game_training_mean <- df_starter_game_training %>%
dplyr::group_by(Game) %>%
dplyr::summarise(MaxVel = mean(MaxVel))
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid), alpha = 0.5) +
geom_line(aes(group = user_uid,
color = user_uid),
alpha = 0.5) +
geom_point(data = df_starter_game_training_mean,
aes(x = Game, y = MaxVel),
color = "black") +
geom_line(data = df_starter_game_training_mean,
aes(x = Game, y = MaxVel),
color = "black") +
labs(y = "Maximum Velocity (m/s)") +
theme(legend.position = "none")
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid), alpha = 0.5) +
geom_line(aes(group = user_uid,
color = user_uid),
alpha = 0.5) +
geom_point(data = df_starter_game_training_mean,
aes(x = Game, y = MaxVel),
color = "black") +
geom_line(data = df_starter_game_training_mean,
aes(x = Game, y = MaxVel),
group = 1,
color = "black") +
labs(y = "Maximum Velocity (m/s)") +
theme(legend.position = "none")
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid), alpha = 0.5) +
geom_line(aes(group = user_uid,
color = user_uid),
alpha = 0.5) +
geom_point(data = df_starter_game_training_mean,
aes(x = Game, y = MaxVel),
size = 3,
color = "black") +
geom_line(data = df_starter_game_training_mean,
aes(x = Game, y = MaxVel),
group = 1,
size = 2,
color = "black") +
labs(y = "Maximum Velocity (m/s)") +
theme(legend.position = "none")
df_starter_game_training %>%
ggplot(aes(x = Game, y = MaxVel)) +
geom_point(aes(color = user_uid), alpha = 0.5) +
geom_line(aes(group = user_uid,
color = user_uid),
alpha = 0.5) +
geom_point(data = df_starter_game_training_mean,
aes(x = Game, y = MaxVel),
size = 3,
color = "grey21") +
geom_line(data = df_starter_game_training_mean,
aes(x = Game, y = MaxVel),
group = 1,
size = 2,
color = "grey21") +
labs(y = "Maximum Velocity (m/s)") +
theme(legend.position = "none")
t.test(MaxVel ~ Game, paired = TRUE, data = df_starter_game_training)
df_positional_maxvel <- df_clean %>%
filter(Game == "Game") %>%
dplyr::group_by(Position) %>%
dplyr::summarise(MaxVel = max(`Max Vel`, na.rm = TRUE))
View(df_positional_maxvel)
df_positional_maxvel <- df_clean %>%
filter(Game == "Game") %>%
dplyr::group_by(Position) %>%
dplyr::summarise(MaxVel = max(`Max Vel`, na.rm = TRUE) * 0.44704)
df_positional_maxvel <- df_clean %>%
filter(Game == "Game") %>%
dplyr::group_by(user_uid, Position) %>%
dplyr::summarise(MaxVel = max(`Max Vel`, na.rm = TRUE) * 0.44704)
df_positional_maxvel <- df_clean %>%
dplyr::group_by(user_uid, Position) %>%
dplyr::summarise(MaxVel = max(`Max Vel`, na.rm = TRUE) * 0.44704)
df_positional_maxvel %>%
ggplot(aes(x = Position, y = MaxVel)) +
geom_boxplot(aes(fill = Position))
aov(MaxVel ~ Position, data = df_positional_maxvel)
positional_aov <- aov(MaxVel ~ Position, data = df_positional_maxvel)
summary(positional_aov)
df_positional_maxvel <- df_clean %>%
dplyr::group_by(user_uid, Position) %>%
dplyr::summarise(MaxVel = max(`Max Vel`, na.rm = TRUE) * 0.44704)
df_positional_maxvel %>%
ggplot(aes(x = Position, y = MaxVel)) +
geom_boxplot(aes(fill = Position))
positional_aov <- aov(MaxVel ~ Position, data = df_positional_maxvel)
summary(positional_aov)
library(irr)
